import pandas as pd
import time
sys.path.insert(0,'/home/ubuntu/data/accelerometers/')
from activity_classification import activity_index
import datetime as dt
from Respiration_Rate.respration_cal import *
if sys.version_info[0] < 3: 
    from StringIO import StringIO # Python 2.x
else:
    from io import StringIO # Python 3.x


al =0
times=[]
windowlength = dt.timedelta(seconds=12)

REGION = 'ap-southeast-1'
ACCESS_KEY_ID = ''
SECRET_ACCESS_KEY = ''
BUCKET_NAME = 'bucket-to-delete-on-20190717'
bn2 = 'bucket-to-delete-on-20190717'
 
s3c = boto3.client(
        's3', 
        region_name = REGION,
        aws_access_key_id = ACCESS_KEY_ID,
        aws_secret_access_key = SECRET_ACCESS_KEY
    )


# print(os.chdir())
key1 = 'all_f.csv' 
obj = s3c.get_object(Bucket= BUCKET_NAME , Key = key1)
files = pd.read_csv(io.BytesIO(obj['Body'].read()), encoding='utf8')

files = list(files.iloc[:,0])
m=0
for file in files:

    endtimeb = time.time()
    m+=1
    print(m,file)
    try:     
        print(endtimeb - endtimea)
        print('what time is this? buffer time?')
    except:
        pass
    s = time.time()
    KEY = 'accel_test_0717/accel/' + file # file path in S3
    obj = s3c.get_object(Bucket= BUCKET_NAME , Key = KEY)
    rawdata = pd.read_csv(io.BytesIO(obj['Body'].read()), encoding='utf8')
    s2 = time.time()

    rawdata = rawdata.dropna(subset=['accel_x'])
    acc_data = pd.DataFrame(columns=['time','x','y','z'])
    acc_data.loc[:,'time'] = pd.to_datetime(rawdata.Time / 1000, unit='s')
    acc_data.loc[:,'x'] = rawdata.loc[:,'accel_x'] / 1024  # convert to g based unit
    acc_data.loc[:,'y'] = rawdata.loc[:,'accel_y'] / 1024  # * 9.8
    acc_data.loc[:,'z'] = rawdata.loc[:,'accel_z'] / 1024
    acc_data = acc_data.set_index('time', drop=False)
    acc_data = acc_data.resample('0.1S').mean()
    acc_data = acc_data.dropna(subset=['x'])
    acc_data = acc_data.reset_index()
    wind_fix = (10 * windowlength.total_seconds())
    estimatel = len(acc_data)/wind_fix
    rr_acc = pd.DataFrame(columns=['time', 'actindex', 'x', 'y', 'z'])
    test_rr = []
    lastrr = np.nan

    for ind in range(int(estimatel)):
        tmp_start = ind * wind_fix
        tmp_end = (ind + 1) * wind_fix
        tmp_data = acc_data.iloc[int(tmp_start):int(tmp_end), :]
        tmp_data = tmp_data.reset_index(drop=True)
        steady = pd.DataFrame(np.zeros((3, 3)), columns=['x', 'y', 'z'])
        actindex = activity_index.activityIdx(tmp_data, steady)
        segStart = tmp_data.time[0]
        rr = np.nan
        tmp_acc = pd.DataFrame(columns=['time', 'actindex', 'x', 'y', 'z'], index=np.arange(len(tmp_data)))
        tmp_acc[['time', 'x', 'y', 'z']] = tmp_data[['time', 'x', 'y', 'z']]
        tmp_acc.loc[:, 'actindex'] = actindex
        if actindex < .18:
            rr_acc = pd.concat([rr_acc, tmp_acc], axis=0)

        elif (actindex < .35) | ((tmp_data[['x','y','z']].var() < .005).sum() >= 2):
            for acc_index in ['x', 'y', 'z']:
                tmp_acc_or = abs(tmp_data[acc_index].diff()) > .07
                if (tmp_acc_or.sum() >= 0) & (tmp_acc_or.sum() < 5):  # limited movement
                    tmp_acc[acc_index].loc[tmp_acc_or] = np.nan
                    tmp_acc[acc_index] = tmp_acc[acc_index].fillna(tmp_acc[acc_index].mean())
                else:
                    tmp_acc[acc_index] = np.nan
                    rr_acc = pd.DataFrame(columns=['time', 'actindex', 'x', 'y', 'z'])
                    lastrr = np.nan
                    break

            if tmp_acc[['x', 'y', 'z']].notna().sum().sum() > (.7 * len(tmp_data) * 3):
                rr_acc = pd.concat([rr_acc, tmp_acc], axis=0)
        else:
            tmp_acc[['x', 'y', 'z']] = np.nan
            lastrr = np.nan
            rr_acc = pd.DataFrame(columns=['time', 'actindex', 'x', 'y', 'z'])

        if len(rr_acc) >= 480:
            rr_acc.reset_index(drop=True, inplace=True)
            rr_acc = check_acc(rr_acc, thresh=.05)
            if len(rr_acc) >= 360:
                rr_acc.reset_index(drop=True, inplace=True)
                rr1, ci, ind1, rrv = cal_rr(rr_acc)
                rr = final_rr(rr1, lastrr)
                lastrr = np.round(rr, 2)
                test_rr.append([segStart, rr, ci, ind1, rrv, rr_acc])
                rr_acc = rr_acc.tail(240).reset_index(drop=True)

    # pd.DataFrame(test_rr, columns=['time','rr','ci', 'ix1', 'rrv', 'acc']).\
    # to_csv(Efolder + 'rr/' + subj + '_testrr.csv')
    # pd.DataFrame(test_rr, columns=['time','rr','ci', 'ix1','rrv', 'acc']).\
    # to_pickle(Efolder + 'rr/' + subj + '_testrr.pkl')
    # pd.DataFrame(test_rr, columns=['rr']).to_pickle(Efolder + 'rr/' + subj + '_testrr.pkl')
    aa=time.time()
    processtime = aa-s2
    print(processtime )
    
    

    csv_buffer = StringIO()
    pd.DataFrame(test_rr,columns=['time','rr','ci', 'ix1', 'rrv', 'acc']).to_csv(csv_buffer)
    s3_resource = boto3.resource('s3',region_name = REGION,
            aws_access_key_id = ACCESS_KEY_ID,
            aws_secret_access_key = SECRET_ACCESS_KEY)
   
    s3_resource.Object(bn2, 'Chengwen/sv_test/' +  file.split('_')[0] + '_testrr.csv').put(Body=csv_buffer.getvalue())
    now = time.time()
    print(now - s)
    print(now - s - processtime)
    times.append([file,now - s,now - s - processtime])
    print('--------------------------')
    endtimea = time.time()
    al+=1
    if al==10:
        csv_buffer2 = StringIO()
        pd.DataFrame(times).to_csv(csv_buffer2)
        s3_resource2 = boto3.resource('s3',region_name = REGION,
                aws_access_key_id = ACCESS_KEY_ID,
                aws_secret_access_key = SECRET_ACCESS_KEY)
        s3_resource2.Object(bn2, 'time.csv').put(Body=csv_buffer2.getvalue())
